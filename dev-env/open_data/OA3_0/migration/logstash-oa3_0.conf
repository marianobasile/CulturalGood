input {
		file {
			path =>	"${OA_DIR:/usr/share/logstash/OA3_0/toscana}/migration/regione-toscana_OA3.00_0.csv" 
			# start reading new files (never seen before) from the beginning 
			start_position => "beginning"
			# start reading already seen files from beginning.
			sincedb_path => "/dev/null"
		}	
}

filter {
	
	if "http://www.sigecweb.beniculturali.it/images/fullsize/ICCD50007125/ICCD5193292_11734.jpg" in [message] or "http://www.sigecweb.beniculturali.it/images/fullsize/ICCD50007125/ICCD5193253_11703.jpg" in [message] or "http://www.sigecweb.beniculturali.it/images/fullsize/ICCD12500/ICCD6039156_HR000880.JPG" in [message] {
    drop { }
  }
	
	csv {

		skip_header => true

		#csv file format
		columns => 

		["IMG","BENE_CULTURALE","TITOLO","SOGGETTO","TIPO_SCHEDA","CODICE_UNIVOCO","LOCALIZZAZIONE","CONTENITORE","DATAZIONE","AMBITO_CULTURALE","AUTORE","MATERIA_TECNICA","MISURE","CONDIZIONE_GIURIDICA","DATI_ANALITICI","ISCRIZIONE","NOTIZIE_STORICO-CRITICHE","ALTRA_LOCALIZZAZIONE","REPERIMENTO","ALTRE_ATTRIBUZIONI","COMMITTENZA","DATI_CATASTALI","GEOREFERENZIAZIONE","BIBLIOGRAFIA","DEFINIZIONE","DENOMINAZIONE","CLASSIFICAZIONE","REGIONE","PROVINCIA","COMUNE","LOCALITA","TOPONIMO","DIOCESI","INDIRIZZO","PROVVEDIMENTI_TUTELA","INVENTARIO","STIMA","RAPPORTO","ALTRI_CODICI","ENTE_SCHEDATORE","ENTE_COMPETENTE","AUTORI","ANNO_CREAZIONE","ANNO_MODIFICA","LAT","LON"]

		separator => ";"

	}

	
	# ========= ADDING ADDITIONAL FIELDS =========
	# The following fields are necessary in order to know category, disciplinarySector and typology.
	mutate {
		add_field => {
			"category" => "Beni mobili"
			"disciplinarySector" => "Beni storici e artistici"
			"typology" => "Opera e oggetto d'Arte"
		}
	}
	# ========= ADDING ADDITIONAL FIELDS =========


	# ========= PARSING IMG FIELD =========
	# obtain image extension from IMG field. Required to save the image after download (see exec output plugin).
	# saved image will have the fingerprint value as their name and their original file extension. 
	if [IMG] and [IMG] != ""  {
		dissect	{ 
			mapping => { 
				"IMG" => "%{}.it%{path}" 
				"path" => "%{}.%{img_extension}"
			}
		}
		mutate {
			rename => { "IMG" => "img_url" }	
		}
	} else {
		mutate {
			remove_field => [ IMG ]
		}
	}
	# ========= END PARSING IMG FIELD =========


	# ========= PARSING DEFINIZIONE FIELD =========
	# DEFINIZIONE contains 'ogtd' and 'ogtt' subfields within ogt field. 
	# Since 'ogtd' and 'ogtt' subfields are already available within BENE_CULTURALE field this field gets simply removed.
	# ========= END PARSING DEFINIZIONE FIELD =========


	# ========= PARSING DENOMINAZIONE FIELD =========
	# DENOMINAZIONE contains 'ogtn' subfield within ogt field 
	# Since 'ogtn' subfield is already available within BENE_CULTURALE field this field gets simply removed too.
	# ========= END PARSING DENOMINAZIONE FIELD =========


	# ========= PARSING BENE_CULTURALE FIELD =========
	mutate {
		rename => { "BENE_CULTURALE" => "ogt" }	
	}
	# ========= END PARSING BENE_CULTURALE FIELD =========


	# ========= PARSING TITOLO FIELD =========
	mutate {
		rename => { "TITOLO" => "sgtt" }	
	}

	if [sgtt] and [sgtt] != ""  {

		if "/" in [sgtt] {

			ruby {
	    	code => '

	    	event.set("sgtt", event.get("sgtt").split("/"))
	    	event.get("[sgtt]").each { |sgtt_elem|
	    		
	    			sgtt_elem&.strip
	    	}'
	  	}
		}
	}
	# ========= END PARSING TITOLO FIELD =========


	# ========= PARSING SOGGETTO FIELD =========
	mutate {
		rename => { "SOGGETTO" => "sgti" }	
	}

	if [sgti] and [sgti] != "" {

		if "/" in [sgti] {

			ruby {
	    	code => '
	    	event.set("sgti", event.get("sgti").split("/"))
	    	event.get("[sgti]").each { |sgti_elem|
	    		
	    			sgti_elem&.strip
	    	}'
	  	}
		}
	} 
	# ========= END PARSING TITOLO FIELD =========

	
	# ========= BUILD UP OG PARAGRAPH =========
	ruby {
  	code => "
  				event.set('og',{'ogt' => event.get('[ogt]'), 'sgt' => {'sgti' => event.get('[sgti]'), 'sgtt' => event.get('[sgtt]')}})
  	"
	}
	# ========= END BUILD UP OG PARAGRAPH =========


	# ========= PARSING TIPO_SCHEDA FIELD =========
	dissect	{ 
			mapping => { "TIPO_SCHEDA" => "%{tsk}_%{}" }
	}
	# ========= END PARSING TIPO_SCHEDA FIELD =========


	# ========= PARSING CODICE_UNIVOCO FIELD =========
	ruby {
	  code => "
	  		if event.get('[CODICE_UNIVOCO]').include? '-'
	    		uuid_src = event.get('[CODICE_UNIVOCO]').split('-')[0]
	    	else
	    		uuid_src = event.get('[CODICE_UNIVOCO]')
	    	end
	  		codice_univoco_array = uuid_src.split(' ')
	  		event.set('[nctr]', codice_univoco_array[0])
	  		event.set('[nctn]', codice_univoco_array[1])
	  		if event.get('[CODICE_UNIVOCO]').split('-')[1]
	  			event.set('[ncts]', event.get('[CODICE_UNIVOCO]').split('-')[1])
	  			event.set('nct',{'nctr' => event.get('[nctr]'), 'nctn' => event.get('[nctn]'), 'ncts' => event.get('[ncts]')&.strip })
	  		else
	  			event.set('[ncts]', '')
	  			event.set('nct',{'nctr' => event.get('[nctr]'), 'nctn' => event.get('[nctn]') })
	  		end
	  "
	}
	# ========= END PARSING CODICE_UNIVOCO FIELD =========


	# ========= PARSING ENTE_SCHEDATORE FIELD =========
	mutate {
    	rename => { "ENTE_SCHEDATORE" => "esc" }
  }
	# ========= END PARSING ENTE_SCHEDATORE FIELD =========


	# ========= PARSING ENTE_COMPETENTE FIELD =========
	mutate {
    	rename => { "ENTE_COMPETENTE" => "ecp" }
  }
	# ========= END PARSING ENTE_COMPETENTE FIELD =========


	# ========= BUILD UP CD PARAGRAPH =========
	ruby {
  	code => "
  				event.set('cd',{'tsk' => event.get('[tsk]'), 'nct' => event.get('[nct]'), 'esc' => event.get('[esc]'), 'ecp' => event.get('[ecp]')})
  	"
	}
	# ========= END BUILD UP CD PARAGRAPH =========


	# ========= GENERATE UNIQUE ID FOR DOCUMENT INDEXING AND DOCUMENT/IMAGE MATCHING =========
	# The SHA256(nct) will be the unique _id for the document inside ES.
	# The SHA256(nct) will also be used as the image's filename.
	# After the image has been added to IPFS,its hash can be stored into the associated document using image's filename as _id
	fingerprint {
		method => "SHA256"
		key => "${HMAC_KEY}"
		source => ["CODICE_UNIVOCO"]
	}
	# ========= END GENERATE UNIQUE ID FOR DOCUMENT INDEXING AND DOCUMENT/IMAGE MATCHING =========


	# ========= PARSING LOCALIZZAZIONE FIELD =========
	# LOCALIZZAZIONE field gets removed because some records do not follow the OA standard
	# Furthermore there are even inconsistent record (Stato as State, Firenze as Region)
	# Since there are no records specifying a foreign country, pvcs and pvcr fields can be hardcoded to Italia and Toscana
	# The field can be completely reconstructed by means of other available fields in the csv source.
	# ========= END PARSING LOCALIZZAZIONE FIELD =========


	# ========= PARSING REGIONE FIELD =========
	# REGIONE field gets removed because it is always Toscana and moreover there are errors in the source csv.
	# ========= END PARSING REGIONE FIELD =========


	# ========= PARSING PROVINCIA FIELD =========
	mutate {
    rename => { "PROVINCIA" => "pvcp" }
  }
	# ========= END PARSING PROVINCIA FIELD =========


	# ========= PARSING COMUNE FIELD =========
	mutate {
    rename => { "COMUNE" => "pvcc" }
  }
	# ========= END PARSING COMUNE FIELD =========


	# ========= PARSING LOCALITA FIELD =========
	mutate {
    rename => { "LOCALITA" => "pvcl" }
  }
	# ========= END PARSING LOCALITA FIELD =========


	# ========= PARSING TOPONIMO FIELD =========
	mutate {
    rename => { "TOPONIMO" => "pvl" }
  }
	# ========= END PARSING TOPONIMO FIELD =========


	# ========= PARSING DIOCESI FIELD =========
	mutate {
    rename => { "DIOCESI" => "pve" }
  }
	# ========= END PARSING DIOCESI FIELD =========


	# ========= PARSING CONTENITORE FIELD =========
	# Empty CONTENITORE (ldc) subfields haven't been reported in the csv.
	# In accordance to what has been specified for the ldc structure parsing can't be done.
	# CONTENITORE is simply renamed to ldc and saved as a whole string.
	mutate {
		rename => { "CONTENITORE" => "ldc" }	
	}
	# ========= END PARSING CONTENITORE FIELD =========


	# ========= PARSING INDIRIZZO FIELD =========
	# INDIRIZZO gets removed because CONTENITORE hasn't been parsed.
	# Data would be redudant and not useful since it is already referred to in CONTENITORE (now renamed ldc)
	# ========= END PARSING INDIRIZZO FIELD =========


	# ========= BUILD UP LC PARAGRAPH =========
	ruby {
	  code => "

			event.set('lc', {'pvc' => {'pvcs' => 'Italia', 'pvcr' => 'Toscana', 'pvcp' => event.get('[pvcp]'), 'pvcc' => event.get('[pvcc]'), 'pvcl' => event.get('[pvcl]')}, 'pvl' => event.get('[pvl]'), 'pve' => event.get('[pve]'), 'ldc' => event.get('[ldc]') })
	    			
	  "
	}
	# ========= END BUILD UP LC PARAGRAPH =========


	# ========= PARSING DATAZIONE FIELD =========

	dissect	{ 
		mapping => { "DATAZIONE" => "%{};%{dts}]%{adt_temp}" }
	}

	mutate {
    		update => { "dts" => "%{dts}]" }
    		strip => [dts]
  }

  dissect	{
		mapping => {
			"dts" => "%{dtsiv}  - %{dtsflm}"
			"dtsflm" => "%{dtsf} %{dtslm}"
		}
	}

	if "a.C." in [dtsiv] {

		if "(" in [dtsiv] {

			dissect	{
				mapping => { "dtsiv" => "%{dtsi} %{} %{dtsv}" }
			}

		} else {

			dissect	{
				mapping => { "dtsiv" => "%{dtsi} %{}"	}
				add_field => { "dtsv" => ""	}
			}
		}

		mutate {	
				update => { "dtsi" => "%{dtsi} BC" }
		}

	} else {

		if "(" in [dtsiv] {

			dissect	{
				mapping => {	"dtsiv" => "%{dtsi} (%{dtsv}"	}
			}

			mutate {	
				update => { "dtsv" => "(%{dtsv}" }
			}

		} else {

			dissect	{
				mapping => {	"dtsiv" => "%{dtsi}"	}
				add_field => {	"dtsv" => ""	}
			}
		}
	}

	if "a.C." in [dtslm] {

		if "(" not in [dtslm] {

			dissect	{
				mapping => {	"dtslm" => "%{} %{dtm}"	}
				add_field => {	"dtsl" => ""	}
			}
		} else {

			dissect	{
					mapping => {	"dtslm" => "%{} %{dtsl} %{dtm}"	}
			}

			if "[NR (" in [dtsl] {

				mutate {	
					update => { 
						"dtm" => "%{dtsl}" 
						"dtsl" => ""
					}
				}
			}	
		}
		
		mutate {	
			update => { "dtsf" => "%{dtsf} BC" }
		}

	} else {

			if "[NR (" in [dtslm] {

				if ") " in [dtslm] {

					dissect	{
						mapping => {	"dtslm" => "%{dtsl} %{dtm}"	}
					}

				} else {

					dissect	{
						mapping => {	"dtslm" => "%{dtm}"	}
						add_field => {	"dtsl" => ""	}
					}

				}

			} else {

				if "(" in [dtslm] {

					dissect	{
						mapping => {	"dtslm" => "%{dtsl} %{dtm}"	}
					}
				} else {

					dissect	{
						mapping => {	"dtslm" => "%{dtm}"	}
						add_field => {	"dtsl" => ""	}
					}
				}
			}		
	}

	if [adt_temp] != "" {

		dissect	{
			mapping => {	"adt_temp" => "%{} %{adt}"	}
		}
	} else {
		mutate {
    			rename => { "adt_temp" => "adt" }
  	}
	}


	# ========= END PARSING DATAZIONE FIELD =========


	# ========= BUILD UP DT PARAGRAPH =========
	ruby {
	  code => "

			event.set('dt', {'dts' => {'dtsi' => event.get('[dtsi]'), 'dtsv' => event.get('[dtsv]'), 'dtsf' => event.get('[dtsf]'), 'dtsl' => event.get('[dtsl]')}, 'dtm' => event.get('[dtm]'), 'adt' => event.get('[adt]')})
	    			
	  "
	}
	# ========= END BUILD UP DT PARAGRAPH =========


	# ========= PARSING AMBITO_CULTURALE FIELD =========
	if [AMBITO_CULTURALE] and [AMBITO_CULTURALE] != "" {
		ruby {
	    	code => "

	    		cultural_field_array = Array.new

	    		#divide different instances on pipe
	    		event.get('[AMBITO_CULTURALE]').gsub!(/(\w\))/, '\1|')

	    		#divide fields inside an istance with !
	    		event.get('[AMBITO_CULTURALE]').gsub!(/(,\s.+\()/, '!\1')

	    		event.get('[AMBITO_CULTURALE]').gsub!(/(\()/, '!\1')

	    		event.get('[AMBITO_CULTURALE]').gsub!(/(!\(recupero)/, '(recupero')

	    		event.get('[AMBITO_CULTURALE]').gsub!(/(!\(\?)/, '(?')

	    		event.get('[AMBITO_CULTURALE]').split('|').each { |cultural_field_elem|

	    			if /\)/.match(cultural_field_elem.split('!')[0]) == nil

	    				if cultural_field_elem.split('!').length == 3

		    				cultural_field_array.push({'atbd' => cultural_field_elem.split('!')[0], 'atbr' => cultural_field_elem.split('!')[1].gsub!(/,\s/, ''), 'atbm' => cultural_field_elem.split('!')[2]})
		    			else
		    				cultural_field_array.push({'atbd' => cultural_field_elem.split('!')[0], 'atbm' => cultural_field_elem.split('!')[1]})
		    			end

	    			end
		    			
	    		}

	    		event.set('atb', cultural_field_array)

	    	"
		}
	} else {
			ruby {
	    	code => "
	    		event.set('atb', [{}])
	    	"
			}
	}
	# ========= END PARSING AMBITO_CULTURALE FIELD =========


	# ========= PARSING AUTORE FIELD =========
	if [AUTORE] and [AUTORE] != ""  {
		ruby {
	    	code => "

	    		authors = Array.new 
	    		event.get('[AUTORE]').gsub!(/(\),\s)/, '\1|')
	    		event.get('[AUTORE]').split(', |').each { |author|
	    		
	    			author.gsub!(/(\([\da-zA-Z\S])/, '|\1')
	    			authors.push({'autn' => author.split(' |')[0]&.strip, 'auta' => author.split(' |')[1]&.strip})
	    		}
	    		event.set('aut', authors)

	    	"
		}
	} else {
			ruby {
	    	code => "
	    		event.set('aut', [{}])
	    	"
			}
	}
	# ========= END PARSING AUTORE FIELD =========


	# ========= PARSING ALTRE_ATTRIBUZIONI FIELD =========
	if [ALTRE_ATTRIBUZIONI] and [ALTRE_ATTRIBUZIONI] != "" {

		ruby {
	    	code => "

	    		aat_array = Array.new
	    		if ! event.get('[ALTRE_ATTRIBUZIONI]').include? ';'
	    			aat_src = event.get('[ALTRE_ATTRIBUZIONI]') + ';'
	    		else
	    			aat_src = event.get('[ALTRE_ATTRIBUZIONI]')
	    		end
	    		aat_src_splitted = aat_src.split(';')
    			aat_src_splitted.each { |aat_istance|

    				aat_array.push(aat_istance&.strip)
  				}

	    		event.set('aat', aat_array)
	    	"
			}
	} else {
			ruby {
	    	code => "
	    		event.set('aat', [])
	    	"
			}
	}
	# ========= END PARSING ALTRE_ATTRIBUZIONI FIELD =========


	# ========= PARSING COMMITTENZA FIELD =========
	if [COMMITTENZA] and [COMMITTENZA] != ""  {

		ruby {
	    	code => "

	    		cmm_array = Array.new
	    		if ! event.get('[COMMITTENZA]').include? ';'
	    			cmm_src = event.get('[COMMITTENZA]') + ';'
	    		else
	    			cmm_src = event.get('[COMMITTENZA]')
	    		end
	    		cmm_src_splitted = cmm_src.split(';')
    			cmm_src_splitted.each { |cmm_istance|

    				cmm_array.push(cmm_istance&.strip)
  				}

	    		event.set('cmm', cmm_array)
	    	"
			}
	} else {
			ruby {
	    	code => "
	    		event.set('cmm', [])
	    	"
			}
	}
	# ========= END PARSING COMMITTENZA FIELD =========


	# ========= BUILD UP AU PARAGRAPH =========
	ruby {
	  code => "

			event.set('au', {'aut' => event.get('[aut]'), 'atb' => event.get('[atb]'), 'aat' => event.get('[aat]'), 'cmm' => event.get('[cmm]')})
	    			
	  "
	}
	# ========= END BUILD UP AU PARAGRAPH =========


	# ========= PARSING MATERIA_TECNICA FIELD =========
	if "/ " in [MATERIA_TECNICA] {
		
		ruby {
    	code => "

    		mtc_array = Array.new 
    		event.get('[MATERIA_TECNICA]').split('/ ').each { |mtc_istance|
    		
    			mtc_array.push(mtc_istance&.strip)

    		}
    		event.set('mtc', mtc_array)

    	"
    	remove_field => [ MATERIA_TECNICA ]
		}

	} else {
		mutate {
  		rename => { "MATERIA_TECNICA" => "mtc" }
		}
	}
	# ========= END PARSING MATERIA_TECNICA FIELD =========


	# ========= PARSING MISURE FIELD =========
	ruby {
  	code => "

  		mis_array = Array.new
  		misu = ''
  		misa = ''
  		misl = ''
  		misp = ''
  		misd = ''
  		misn = ''
  		miss = ''
  		misg = ''

			if event.get('[MISURE]') && event.get('[MISURE]') != ''
  			if ! event.get('[MISURE]').include? ', '
	    			misure_src = event.get('[MISURE]') + ', '
	    		else
	    			misure_src = event.get('[MISURE]')
	    		end
  			misure_src.split(', ').each { |mis_istance|
			
	  			if mis_istance.downcase().include? 'alt'
	  				misa = mis_istance.split('. ')[1]&.strip
	  			elsif mis_istance.downcase().include? 'largh'
	  				misl = mis_istance.split('. ')[1]&.strip
	  			elsif mis_istance.downcase().include? 'prof'
	  				misp = mis_istance.split('. ')[1]&.strip
	  			elsif mis_istance.downcase().include? 'diam'
	  				misd = mis_istance.split('. ')[1]&.strip
	  			elsif mis_istance.downcase().include? 'lungh'
	  				misn = mis_istance.split('. ')[1]&.strip
	  			elsif mis_istance.downcase().include? 'sp'
	  				miss = mis_istance.split('. ')[1]&.strip
	  			elsif mis_istance.downcase().include?('g')
	  				misu = mis_istance&.strip
	  			elsif mis_istance.downcase().include?('cm') || mis_istance.downcase().include?('ct') || mis_istance.downcase().include?('hg') || mis_istance.downcase().include?('kg')|| mis_istance.downcase().include?('l')|| mis_istance.downcase().include?('m')|| mis_istance.downcase().include?('mc')|| mis_istance.downcase().include?('mm')|| mis_istance.downcase().include?('mq')|| mis_istance.downcase().include?('unr')
	  				misu = mis_istance&.strip
	  			else
	  				misg = mis_istance&.strip
	  			end
				}
			end
			
			mis_array.push({'misu' => misu, 'misa' => misa, 'misl' => misl, 'misp' => misp, 'misd' => misd, 'misn' => misn, 'miss' => miss, 'misg' => misg })

		event.set('mis', mis_array)
  	"
	}
	# ========= END PARSING MISURE FIELD =========


	# ========= BUILD UP MT PARAGRAPH =========
	ruby {
	  code => "

			event.set('mt', {'mtc' => event.get('[mtc]'), 'mis' => event.get('[mis]')})
	    			
	  "
	}
	# ========= END BUILD UP MT PARAGRAPH =========


	# ========= PARSING CONDIZIONE_GIURIDICA FIELD =========
	ruby {
  	code => "

  		event.get('[CONDIZIONE_GIURIDICA]').gsub!('LuccaO', 'Lucca, O')

  		event.get('[CONDIZIONE_GIURIDICA]').gsub!('Istruzione, ', 'Istruzione ')

  		event.get('[CONDIZIONE_GIURIDICA]').gsub!('RicercaConservatorio', 'Ricerca, Conservatorio')

  		event.set('cdgg', event.get('[CONDIZIONE_GIURIDICA]').split(', ')[0]&.strip)

  		if event.get('[CONDIZIONE_GIURIDICA]').split(', ').length == 2 || event.get('[CONDIZIONE_GIURIDICA]').split(', ').length == 3

  			cdgs_array = Array.new

  			if event.get('[CONDIZIONE_GIURIDICA]').split(', ')[1].include? '-'

  				event.get('[CONDIZIONE_GIURIDICA]').split(', ')[1].split('-').each { |cdgs_istance|

  					cdgs_array.push(cdgs_istance&.strip)
  				}
  			else
  				cdgs_array.push(event.get('[CONDIZIONE_GIURIDICA]').split(', ')[1])
  			end

  			event.set('cdgs', cdgs_array)
  		end

  		if event.get('[CONDIZIONE_GIURIDICA]').split(', ').length == 3

  			cdgi_array = Array.new

  			if event.get('[CONDIZIONE_GIURIDICA]').split(', ')[2].include? '-'

  				event.get('[CONDIZIONE_GIURIDICA]').split(', ')[2].split('-').each { |cdgi_istance|

  					cdgi_array.push(cdgi_istance&.strip)
  				}
  			else
  				cdgi_array.push(event.get('[CONDIZIONE_GIURIDICA]').split(', ')[2])
  			end

  			event.set('cdgi', cdgi_array)
  		end

  	"
	}
	# ========= END PARSING CONDIZIONE_GIURIDICA FIELD =========


	# ========= PARSING PROVVEDIMENTI_TUTELA FIELD =========
	if [PROVVEDIMENTI_TUTELA] and [PROVVEDIMENTI_TUTELA] != "" {

		ruby {
	    	code => "
	    		nvc_array = Array.new

	    		if ! event.get('[PROVVEDIMENTI_TUTELA]').include? ','
	    			if event.get('[PROVVEDIMENTI_TUTELA]').downcase().include? 'nr ('
	    				nvct = event.get('[PROVVEDIMENTI_TUTELA]')
	    				nvc_array.push({'nvct' => nvct})
	    			end
	    		else
	    			event.get('[PROVVEDIMENTI_TUTELA]').gsub!(/(\/\d{2})([a-zA-Z])/, '\1!\2')

	    			if ! event.get('[PROVVEDIMENTI_TUTELA]').include? '!'
	    				nvc_src = event.get('[PROVVEDIMENTI_TUTELA]') + '!'
	    			else
	    				nvc_src = event.get('[PROVVEDIMENTI_TUTELA]')
	    			end

	    			nvc_src.split('!').each { |nvc_istance|

	    				nvc_istance.gsub!(/(, )(\d{4})/, '| \2')
	    				nvc_istance.gsub!(/(, )(NR)/, '| \2')

	    				nvct = nvc_istance.split('|')[0]&.strip

	    				if nvc_istance.split('|')[1] && nvc_istance.split('|')[1] != ''
    						if ! nvc_istance.split('|')[1].strip.downcase().include? 'nr (recupero pregresso)'
    							nvce = nvc_istance.split('|')[1].strip
    							if nvc_istance.split('|').length == 3 && nvc_istance.split('|')[2] && nvc_istance.split('|')[2] != ''
    								nvc_array.push({'nvct' => nvct, 'nvce' => nvce, 'nvcd' => nvc_istance.split('|')[2].strip })
    							else
    								nvc_array.push({'nvct' => nvct, 'nvce' => nvce})
    							end
    						else
    							nvc_array.push({'nvct' => nvct})
    						end
    					else
    						nvc_array.push({'nvct' => nvct})
    					end

	    			}
	    		end
	    		
	 				event.set('nvc_array', nvc_array)
	    	"
		}
	} else {
			ruby {
	    	code => "
	    		event.set('nvc_array', [{}])
	    	"
			}
	}
	# ========= END PARSING PROVVEDIMENTI_TUTELA FIELD =========


	# ========= BUILD UP TU PARAGRAPH =========
	ruby {
	  code => "

	  	if event.get('[cdgs]') && event.get('[cdgi]')
				event.set('tu', {'cdg' => {'cdgg' => event.get('[cdgg]'), 'cdgs' => event.get('[cdgs]'), 'cdgi' => event.get('[cdgi]')}, 'nvc' => event.get('[nvc_array]') })
			else 
				event.set('tu', {'cdg' => {'cdgg' => event.get('[cdgg]'), 'cdgs' => event.get('[cdgs]')}, 'nvc' => event.get('[nvc_array]') })
			end

	    			
	  "
	}
	# ========= END BUILD UP TU PARAGRAPH =========


	# ========= PARSING DATI_ANALITICI FIELD =========
	mutate {
		rename => { "DATI_ANALITICI" => "des" }	
	}
	# ========= END PARSING DATI_ANALITICI FIELD =========


	# ========= PARSING ISCRIZIONE FIELD =========
	mutate {
		rename => { "ISCRIZIONE" => "isr" }	
	}
	# ========= END PARSING ISCRIZIONE FIELD =========


	# ========= PARSING NOTIZIE_STORICO-CRITICHE FIELD =========
	mutate {
		rename => { "NOTIZIE_STORICO-CRITICHE" => "nsc" }	
	}	
	# ========= END PARSING NOTIZIE_STORICO-CRITICHE FIELD =========


	# ========= BUILD UP DA PARAGRAPH =========
	ruby {
	  code => "

			event.set('da', {'des' => event.get('[des]'), 'isr' => event.get('[isr]'), 'nsc' => event.get('[nsc]') })
	    			
	  "
	}
	# ========= END BUILD UP DA PARAGRAPH =========


	# ========= PARSING ALTRA_LOCALIZZAZIONE FIELD =========
	if [ALTRA_LOCALIZZAZIONE] and [ALTRA_LOCALIZZAZIONE] != "" {

		ruby {
	    	code => "

	    		la_array = Array.new
	    		if ! event.get('[ALTRA_LOCALIZZAZIONE]').include? ';'
	    			la_src = event.get('[ALTRA_LOCALIZZAZIONE]') + ';'
	    		else
	    			la_src = event.get('[ALTRA_LOCALIZZAZIONE]')
	    		end
	    		la_src_splitted = la_src.split(';')
    			la_src_splitted.each { |la_istance|

    				tcl = la_istance.split(':')[0].strip
    				#tcl = la_istance.split(':')[0]
    				prv = la_istance.split(':')[1]

    				prvs = ''
    				prvr = ''
    				prvp = ''
    				prvc = ''
    				prvl = ''
    				prve = ''

    				if prv.split(',').length == 0 || prv.split(',').length == 1
    					prvs = prv.split(',')[0]&.strip
    				elsif prv.split(',').length == 2
    					prvs = prv.split(',')[0]&.strip    					
    					prve = prv.split(',')[1]&.strip
    				elsif prv.split(',').length == 3
    					prvs = 'Italia'
    					prvr = prv.split(',')[0]&.strip
    					prvp = prv.split(',')[1]&.strip
    					prvc = prv.split(',')[2]&.strip
    				elsif prv.split(',').length == 4
    					if prv.split(',')[0].downcase().include? 'italia'
    						prvs = prv.split(',')[0]&.strip
    						prvr = prv.split(',')[1]&.strip
    						prvp = prv.split(',')[2]&.strip
    						prvc = prv.split(',')[3]&.strip
    					else
    						prvs = 'Italia'
    						prvr = prv.split(',')[0]&.strip
    						prvp = prv.split(',')[1]&.strip
    						prvc = prv.split(',')[2]&.strip
    						prvl = prv.split(',')[3]&.strip
    					end
    				else prv.split(',').length == 5
    					prvs = prv.split(',')[0]&.strip
    					prvr = prv.split(',')[1]&.strip
    					prvp = prv.split(',')[2]&.strip
    					prvc = prv.split(',')[3]&.strip
    					prvl = prv.split(',')[4]&.strip
    				end

    				la_array.push({'tcl' => tcl, 'prv' => {'prvs' => prvs, 'prvr' => prvr, 'prvp' => prvp, 'prvc' => prvc, 'prvl' => prvl, 'prve' => prve} })
  				}

	    		event.set('la', la_array)
	    	"
			}

	} else {
			ruby {
	    	code => "
	    		event.set('la', [{}])
	    	"
			}
	}
	# ========= END PARSING ALTRA_LOCALIZZAZIONE FIELD =========


	# ========= PARSING REPERIMENTO FIELD =========
	# field has been removed since the only two availbale records do not look consistent.
	# ========= END PARSING REPERIMENTO FIELD =========


	# ========= PARSING DATI_CATASTALI FIELD =========
	# field has been removed since localizzazione catastale is part of the RA standard (and not of the OA)
	# ========= END PARSING DATI_CATASTALI FIELD =========


	# ========= PARSING LAT FIELD =========
	if [LAT] and [LAT] != '' {
		mutate {
			rename => { "LAT" => "gpdpy" }
			convert => { "gpdpy" => "float" }
		}
	} else {
		mutate {
    	remove_field => [LAT]
  	}
		ruby {
	    	code => "
	    		event.set('gpdpy', '')
	    	"
	  }
	}
	# ========= END PARSING LAT FIELD =========


	# ========= PARSING LON FIELD =========
	if [LON] and [LON] != '' {
		mutate {
			rename => { "LON" => "gpdpx" }
			convert => { "gpdpx" => "float" }
		}
	} else {
			mutate {
    		remove_field => [LON]
  		}
			ruby {
	    	code => "
	    		event.set('gpdpx', '')
	    	"
	  	}
	}
	# ========= END PARSING LON FIELD =========

	
	# ========= PARSING GEOREFERENZIAZIONE FIELD =========
	if [GEOREFERENZIAZIONE] and [GEOREFERENZIAZIONE] != ""  {

		dissect	{ 
			mapping => { 
				"GEOREFERENZIAZIONE" => "%{gpl}: %{}: %{long}; %{}: %{lat}; %{}: %{gpm}; %{}: %{gpt}; %{}: %{gpbb}; %{gpbt}; %{gpbo}" 
			}
		}

		ruby {
	    	code => " 

	    		gp_array = Array.new
	    		
    			if event.get('[long]') != '' && event.get('[lat]') !=  ''
    				gp_array.push({'gpl' => event.get('gpl'), 'gpd' => '', 'gpdpxy' => { 'latitude' => event.get('[lat]'), 'longitude' => event.get('[long]') }, 'gpm' => event.get('gpm'), 'gpt' => event.get('gpt'), 'gpb' => {'gpbb' => event.get('gpbb'), 'gpbt' => event.get('gpbt'), 'gpbo' => event.get('gpbo') } })
    			else
    				gp_array.push({'gpl' => event.get('gpl'), 'gpd' => '', 'gpm' => event.get('gpm'), 'gpt' => event.get('gpt'), 'gpb' => {'gpbb' => event.get('gpbb'), 'gpbt' => event.get('gpbt'), 'gpbo' => event.get('gpbo') } })
    			end
  				
	    		event.set('gp', gp_array)
	    	"
		} 
	} else {
			ruby {
	    	code => "
	    		if event.get('[gpdpy]') != '' && event.get('[gpdpx]') !=  ''
	    			event.set('gp', [{'gpdpxy' => { 'latitude' => event.get('[gpdpy]'), 'longitude' => event.get('[gpdpx]') } }])
	    		else
	    			event.set('gp',[{}])
	    		end
	    	"
			}
	}
	# ========= END PARSING GEOREFERENZIAZIONE FIELD =========

	
	# ========= PARSING BIBLIOGRAFIA FIELD =========
	#++++ Records do refer to BIL field (and not Bibliografia BIB field inside DO paragraph) ++++

	if [BIBLIOGRAFIA] and [BIBLIOGRAFIA] != ""  {

		ruby {
	    	code => "

	    		bil_array = Array.new

	    		if ! event.get('[BIBLIOGRAFIA]').include? ';'
	    			bil_src = event.get('[BIBLIOGRAFIA]') + ';'
	    		else
	    			bil_src = event.get('[BIBLIOGRAFIA]')
	    		end

	    		bil_src_splitted = bil_src.split(';')


    			bil_src_splitted.each { |bil_istance|

    				bil_array.push(bil_istance&.strip)
  				}

	    		event.set('do', {'bil' => bil_array})
	    	"
		}
	} else {
			ruby {
	    	code => "
	    		event.set('do', [{}])
	    	"
			}
	}
	# ========= END PARSING BIBLIOGRAFIA FIELD =========


	# ========= PARSING CLASSIFICAZIONE FIELD =========
	# CLASSIFICAZIONE field gets simply removed because there's no data in the standard which refers to it
	# ========= END PARSING CLASSIFICAZIONE FIELD =========


	# ========= PARSING INVENTARIO FIELD =========
	# INVENTARIO field gets simply removed because INV subfields within the source csv have visibility '0'
	# Maybe it is confidential data
	# ========= END PARSING INVENTARIO FIELD =========


	# ========= PARSING STIMA FIELD =========
	# STIMA field gets simply removed because STI subfields within the source csv have visibility '0'
	# Maybe it is confidential data
	# ========= END PARSING STIMA FIELD =========


	# ========= PARSING RAPPORTO FIELD =========
	if [RAPPORTO] and [RAPPORTO] != "" {

		dissect	{ 
			mapping => { 
				"RAPPORTO" => "%{}: %{}: %{roff}, %{rofosadc}" 
			}
		}

		ruby {
    	code => "

    		ro_array = Array.new
    		if event.get('rofosadc') && event.get('rofosadc') != '' 
    			rofo = ''
    			rofs = ''
    			rofa = ''
    			rofd = ''
    			rofc = ''
  				event.get('rofosadc').split(', ').each { |rofosadc_src|

  				if rofosadc_src.split(':')[0].downcase().include? 'soggetto opera finale/originale'
  					rofs = rofosadc_src.split(':')[1]&.strip

  				elsif rofosadc_src.split(':')[0].downcase().include? 'autore opera finale/originale'
  					rofa = rofosadc_src.split(':')[1]&.strip

  				elsif rofosadc_src.split(':')[0].downcase().include? 'data opera finale/originale'
  					rofd = rofosadc_src.split(':')[1]&.strip

  				elsif rofosadc_src.split(':')[0].downcase().include? 'collocazione opera finale/originale'
  					rofc = rofosadc_src.split(':')[1]&.strip

  				elsif rofosadc_src.split(':')[0].downcase().include? 'opera finale/originale'
  					rofo = rofosadc_src.split(':')[1]&.strip

  				end
				}

					if rofd != '' && rofd != ' '
						ro_array.push({'rof' => {'roff' => event.get('roff'), 'rofo' => rofo, 'rofs' => rofs, 'rofa' => rofa, 'rofd' => rofd, 'rofc' => rofc} })
					else
						ro_array.push({'rof' => {'roff' => event.get('roff'), 'rofo' => rofo, 'rofs' => rofs, 'rofa' => rofa, 'rofc' => rofc} })
					end
				end

    		event.set('ro', ro_array)
    	"
  	}
	} else {
			ruby {
	    	code => "
	    		event.set('ro', [{}])
	    	"
			}
	}
	# ========= END PARSING RAPPORTO FIELD =========


	# ========= PARSING ALTRI_CODICI FIELD =========
	# ALTRI_CODICI field gets simply removed because all records are empty
	# ========= END PARSING ALTRI_CODICI FIELD =========


	# ========= PARSING AUTORI FIELD =========
	mutate {
    	rename => { "AUTORI" => "cm-not-analyzed" }
  }
	# ========= END PARSING AUTORI FIELD =========


	# ========= PARSING ANNO_CREAZIONE FIELD =========
	mutate {
    	rename => { "ANNO_CREAZIONE" => "cmpd" }
  }
	# ========= END PARSING ANNO_CREAZIONE FIELD =========


	# ========= PARSING ANNO_MODIFICA FIELD =========
	if [ANNO_MODIFICA] and [ANNO_MODIFICA] != "" {

		ruby {
	    	code => "

	    		agg_array = Array.new
	    		if ! event.get('[ANNO_MODIFICA]').include? ';'
	    			aggd_src = event.get('[ANNO_MODIFICA]') + ';'
	    		else
	    			aggd_src = event.get('[ANNO_MODIFICA]')
	    		end
	    		aggd_src.split(';').each { |year|
	    			agg_array.push({'aggd' => year&.strip})
	    		}
	    		event.set('agg',agg_array)
	    	"
		}
	} else {
			ruby {
	    	code => "
	    		event.set('agg', [{}])
	    	"
			}
	}
	# ========= END PARSING ANNO_MODIFICA FIELD =========


	# ========= BUILD UP CM PARAGRAPH =========
	ruby {
	  code => "

			event.set('cm', {'cmp' => {'cmpd' => event.get('[cmpd]')}, 'agg' => event.get('[agg]') })
	    			
	  "
	}
	# ========= END BUILD UP CM PARAGRAPH =========


	#REMOVE UNNECESSARY FIELDS.
	mutate {
		remove_field => [ message, host, path, DEFINIZIONE, DENOMINAZIONE, ogt, sgti, sgtt, TIPO_SCHEDA, CODICE_UNIVOCO, nctr, nctn, ncts, tsk, ecp, esc, nct, LOCALIZZAZIONE, REGIONE, pvcp, pvcc, pvcl, pvl, pve, ldc, INDIRIZZO, adt_temp, dtsiv, dtslm, dtsflm, dts, dtsi, dtsv, dtsf, dtsl, dtm, adt, DATAZIONE, AMBITO_CULTURALE, AUTORE, atb, aut, cmm, ALTRE_ATTRIBUZIONI, aat, COMMITTENZA, MISURE, mtc, mis, CONDIZIONE_GIURIDICA, PROVVEDIMENTI_TUTELA, cdgg, cdgs, cdgi, nvc_array, des, isr, nsc, ALTRA_LOCALIZZAZIONE, REPERIMENTO, DATI_CATASTALI, gpdpy, gpdpx, gpl, gpm, gpt, gpbb, gpbt, gpbo, GEOREFERENZIAZIONE, long, lat, BIBLIOGRAFIA, CLASSIFICAZIONE, INVENTARIO, STIMA, RAPPORTO, roff, rofosadc, ALTRI_CODICI, ANNO_MODIFICA, cmpd, agg, '@timestamp' ]
	}

	ruby { 
    code => "event.set('timestamp', Time.now());"
	}
}

output {
	# download images and save inside THE ${OA_DIR}/imgs. (OA_DIR is an env varibale specified in the Dockerfile)
	if [img_url] {
		exec {
			command => " echo \'Downloading %{[img_url]}\' && curl -o ${OA_DIR}/imgs/%{[fingerprint]}.%{[img_extension]} %{[img_url]} "
		}
	} else {
			exec {
				command => " echo \'No image is available!\' "
			}
	}

	elasticsearch {
		#action => "create"
		document_id => "%{[fingerprint]}"
		hosts => [ "${ELASTICSEARCH_HOST:elasticsearch}:9200" ]
    index => "oa3_0"
    template => "${OA_DIR:/usr/share/logstash/OA3_0/toscana}/migration/oa3_0-template.json"
    template_name => "cultural-good_oa"
    template_overwrite => true

	}

	file {
		path =>	"${OA_DIR:/usr/share/logstash/OA3_0/toscana}/restore/res/oa3_0-migration.json"
		flush_interval => 0 
	}
	
	#stdout { codec => rubydebug }
}